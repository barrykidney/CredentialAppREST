package credential_store;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import java.time.Instant;

import credential_store.ServiceCredentials;
import credential_store.ServiceCredentialsRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/credentials") // This means URL's start with /credentials (after Application path)
public class MainController {
    @Autowired // This means to get the bean called ServiceCredentialsRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ServiceCredentialsRepository serviceCredentialsRepository;

    @GetMapping(path="/")
    public @ResponseBody Iterable<ServiceCredentials> getAllServiceCredentials() {
        // This returns a JSON or XML with the ServiceCredentials.
        return serviceCredentialsRepository.findAll();
    }

    @GetMapping(path="/{id}")
    public @ResponseBody ServiceCredentials getServiceCredentialsById(@PathVariable Integer id) {

        return serviceCredentialsRepository.findById(id)
                .orElseThrow(() -> new CredentialsNotFoundException(id));
    }

    @PostMapping(path="/")
    public @ResponseBody ServiceCredentials addNewServiceCredentials(@RequestBody ServiceCredentials newServiceCredentials) {
        // This returns a JSON or XML with the ServiceCredentials
        newServiceCredentials.setDateLastModified(Instant.now().toEpochMilli());
        return serviceCredentialsRepository.save(newServiceCredentials);
    }

    @DeleteMapping("/{id}")
    public void deleteServiceCredentials(@PathVariable Integer id) {
        serviceCredentialsRepository.deleteById(id);
    }
}
